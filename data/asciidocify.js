self.port.on('RENDER_SANITIZED_HTML', function(message) {
  showHTML(message.html); 
});

var asciidocify = {
  load: function() {
    var contentType = document.contentType;
    var regexpAdFile = /\.a(sciidoc|doc|d|sc)$/i;
    var isAsciiDocFile = regexpAdFile.test(document.location);
    var isHTMLContent = contentType && (contentType.indexOf('html') > -1);
    if (isAsciiDocFile && !isHTMLContent) {
      convertSanitizeAndRender();
    }
  }
};

var ASCIIDOCTOR_OPTIONS = Opal.hash2(['base_dir', 'backend', 'safe', 'attributes'], {
  'base_dir': Opal.File.$dirname(window.location.href),
  'backend': 'html5',
  'safe': 'server',
  'attributes': ['showtitle', 'platform=opal', 'platform-opal', 'env=browser', 'env-browser']
});

/**
 * Convert AsciiDoc content as HTML and render in web view
 */
function convertSanitizeAndRender() {
  try {
    sanitizeAndShowHTML(convertToHTML(document.firstChild.textContent));
  } catch (ex) {
    showErrorMessage(ex.name + ' : ' + ex.message);
  }
}

/**
 * Convert AsciiDoc to HTML
 * @param content
 * @return {*}
 */
function convertToHTML(content) {
  emptyBody();
  return Opal.Asciidoctor.$convert(content, ASCIIDOCTOR_OPTIONS);
}

/**
 * Pass the HTML through sanitization, then show it.
 *
 * @param html The HTML generated by Asciidoctor to sanitize, then show in the web view.
 */
function sanitizeAndShowHTML(html) {
  self.postMessage({ html: html });
}

/**
 * Show the HTML.
 *
 * @param html The sanitized HTML to show in the web view.
 */
function showHTML(html) {
  // Save <script> before updating document body
  var scripts = document.querySelectorAll('script');
  appendStyles();
  // Append to document body
  var contentDiv = createContentDiv();
  contentDiv.innerHTML = html;
  document.body.appendChild(contentDiv);
  // Append saved <script> to document body
  appendScripts(scripts);
}

/**
 * Show error message
 * @param message The error message
 */
function showErrorMessage(message) {
  // Create a title
  var title = document.createElement("h2");
  title.textContent = 'AsciiDoc conversion failed!';
  // Create a paragraph with the error message
  var paragraph = document.createElement("p");
  paragraph.appendChild(document.createTextNode(message));
  // Empty document body
  emptyBody();
  // Append to document body
  var contentDiv = createContentDiv();
  contentDiv.appendChild(title);
  contentDiv.appendChild(paragraph);
  document.body.appendChild(contentDiv);
}

/**
 * Clear all nodes from body of document.
 */
function emptyBody() {
  var node = document.body;
  while (node.hasChildNodes()) {
    node.removeChild(node.lastChild);
  }
}

/**
 * Append CSS files for styling the generated HTML.
 */
function appendStyles() {
  var asciidoctorLink = document.createElement('link');
  asciidoctorLink.rel = 'stylesheet';
  asciidoctorLink.id = 'asciidoctor-style';
  asciidoctorLink.href = 'resource://asciidoctor-firefox-addon-at-asciidoctor-dot-org/data/css/asciidoctor.css';
  document.head.appendChild(asciidoctorLink);

  var fontAwesomeLink = document.createElement('link');
  fontAwesomeLink.rel = 'stylesheet';
  fontAwesomeLink.id = 'fontawesome-style';
  fontAwesomeLink.href = 'resource://asciidoctor-firefox-addon-at-asciidoctor-dot-org/data/css/font-awesome.min.css';
  document.head.appendChild(fontAwesomeLink);
}

/**
 * Create a div element with id 'content'
 */
function createContentDiv() {
  var contentDiv = document.createElement('div');
  contentDiv.id = 'content';
  return contentDiv;
}

/**
 * Append <script> to document body.
 */
function appendScripts(scripts) {
  var length = scripts.length;
  for (var i = 0; i < length; i++) {
    var script = scripts[i];
    document.body.appendChild(script);
  }
}
